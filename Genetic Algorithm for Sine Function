import random
import math

def fitness_function(x):
    return math.sin(x)

def generate_population(size):
    return [random.uniform(-math.pi, math.pi) for _ in range(size)]

def select(population):
    fitnesses = [fitness_function(individual) for individual in population]
    total_fitness = sum(fitnesses)
    probabilities = [fitness / total_fitness for fitness in fitnesses]
    return random.choices(population, weights=probabilities, k=2)

def crossover(parents):
    alpha = random.random()
    return alpha * parents[0] + (1 - alpha) * parents[1]

def mutate(individual):
    mutation_rate = 0.1
    if random.random() < mutation_rate:
        return individual + random.gauss(0, 0.5)
    else:
        return individual

def genetic_algorithm(population_size, num_generations):
    population = generate_population(population_size)
    for generation in range(num_generations):
        new_population = []
        for _ in range(population_size):
            parents = select(population)
            offspring = crossover(parents)
            offspring = mutate(offspring)
            new_population.append(offspring)
        population = new_population
    best_individual = max(population, key=fitness_function)
    return best_individual

best_individual = genetic_algorithm(100, 1000)
print(f"Best individual: {best_individual}")
print(f"Fitness: {fitness_function(best_individual)}")
